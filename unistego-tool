#! /usr/bin/env python
'''
Created on Jan 15, 2014

@author: ivan
'''

import os
import sys
import argparse
import six
import io
import unistego

CHUNK_SIZE=16*1024

def fail(msg, code):
    six.print_(msg, file=sys.stderr)
    parser.print_usage(sys.stderr)
    sys.exit(code)
    
def main():
    parser=argparse.ArgumentParser()
    parser.add_argument('input_file', help='Input text file', nargs='?', default='')
    parser.add_argument('-i', '--hide', action="store_true", help='Hide secret message into text file')
    parser.add_argument('-u', '--unhide', action='store_true', help='Recover secret message from text file')
    parser.add_argument('-m', '--message', help='Message to hide')
    parser.add_argument('--message-file', help='Read message from this file - using binary mode')
    parser.add_argument('--html', action='store_true', help='Input file is HTML')
    parser.add_argument('-o', '--output', help='Output file (otherwise stdout')
    parser.add_argument('-p', '--preset', help="Name of preset steganography strategy")
    parser.add_argument('-l', '--list', action='store_true', help='List available presets')
    parser.add_argument('--offset', type=int, help='Offset to start in input text file', default=0)
    
    args=parser.parse_args()
    
    if (args.list):
        six.print_('Name\tDescription')
        for name, desc in unistego.list_presets():
            six.print_('%s\t%s'% (name, desc))
        return
    
    if (args.hide and args.unhide) or (not args.hide and not args.unhide):
        fail('You must choose either hide or unhide action', 1)
        
    if not args.preset:
        fail('Preset name must be provided', 3)
    if args.hide:    
        if args.message:
            secret=args.message.encode('utf-8')
        elif args.message_file:
            fname=args.message_file
            if fname=='-':
                if not args.input_file:
                    fail('Stdin is already used for text file', 4)
                f=sys.stdin
            else:
                f=io.open(fname, 'rb')
            secret=f.read()
        else:
            fail('You have to provide message to be hidden in the text',2)
        
        
    if args.input_file:
        in_file=io.open(args.input_file, 'rt')
    else:
        in_file=sys.stdin
        
    if args.output and args.hide:
        out_file=io.open(args.output, 'wt')
    elif args.output and args.unhide:
         out_file=io.open(args.output, 'wb')
    elif args.unhide and six.PY3:
        out_file=sys.stdout.buffer
    else:
        out_file=sys.stdout
        
    if args.hide:    
        if args.html:
            hider=unistego.get_hider_html(out_file, secret, args.preset, start_at=args.offset)
        else:
            hider=unistego.get_hider(out_file, secret, args.preset, start_at=args.offset)
            
        with in_file, hider:
            while True:
                txt=in_file.read(CHUNK_SIZE)
                if not txt:
                    break
                hider.write(txt)
                
    elif args.unhide:
        if args.html:
            unhider=unistego.get_unhider_html(in_file, args.preset) 
        else:
            unhider=unistego.get_unhider(in_file, args.preset) 
        
        with unhider:    
            while True:
                txt=unhider.read(CHUNK_SIZE)
                if not txt:
                    break
                
        with out_file:
            
            out_file.write(unhider.get_message())
                
            

if __name__ == '__main__':
    main()
        
    
        